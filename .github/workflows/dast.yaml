name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch: 

jobs:
  sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      
      # Setup JDK 11 for compilation and testing
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      # Set full permissions for the workspace and potentially broader scope
      - name: Set full permissions
        run: sudo chmod -R 777 .      
      # Run build without SonarQube analysis
      - name: Build with Maven
        run: mvn clean install -DskipTests

      # Cache Maven and SonarQube packages
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Setup JDK 17 for SonarQube analysis
      - name: Set up JDK 17 for SonarQube
        uses: actions/setup-java@v1
        with:
          java-version: '17'
          distribution: 'adopt'

      # Run SonarQube analysis
      - name: Analyze with SonarQube
        env:
          SONAR_TOKEN: "squ_15a00575a2e22ac704e7388565d764b5e45fd1ce"
          SONAR_HOST_URL: "https://sq.accuknox.com:443"
        run: mvn sonar:sonar -Dsonar.projectKey='webgoat-dast'

      - name: Run AccuKnox SAST job
        run: |
          docker run --rm \
            -e SQ_URL=<SQ_URL> \
            -e SQ_AUTH_TOKEN=<AUTH-TOKEN> \
            -e REPORT_PATH=/app/data/ \
            -e SQ_PROJECTS="^PROJECT-KEY$" \
            -v $PWD:/app/data/ \
            accuknox/sastjob:latest
            
      - name: List reports
        run: |
          echo "Listing generated reports..."
          ls -l ${GITHUB_WORKSPACE}          
      - name: Upload SAST reports
        env:
          AK_URL: cspm.demo.accuknox.com
          TENANT_ID: <Tenant-ID>
          AK_TOK: <artifact token received from accuknox management plane>
        run: |
          cd ${GITHUB_WORKSPACE}
          for file in `ls -1 SQ-*.json`; do
            curl --location --request POST "https://$AK_URL/api/v1/artifact/?tenant_id=$TENANT_ID&data_type=SQ&save_to_s3=false" \
              --header "Tenant-Id: $TENANT_ID" \
              --header "Authorization: Bearer $AK_TOK" \
              --form "file=@\"$file\""
          done


# name: CI/CD Pipeline
# #
# on:
#   push:
#     branches: [ master ]
#   pull_request:
#     branches: [ master ]

# jobs:

#   sast:
#     # needs: build
#     #
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#         with:
#           fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#       - name: Set up JDK 11
#         uses: actions/setup-java@v1
#         with:
#           java-version: 11
#           distribution: 'adopt'
#       - name: Cache SonarQube packages
#         uses: actions/cache@v1
#         with:
#           path: ~/.sonar/cache
#           key: ${{ runner.os }}-sonar
#           restore-keys: ${{ runner.os }}-sonar
#       - name: Cache Maven packages
#         uses: actions/cache@v1
#         with:
#           path: ~/.m2
#           key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-m2
#       - name: Build and analyze
#         env:
#           SONAR_TOKEN: "squ_15a00575a2e22ac704e7388565d764b5e45fd1ce"
#           SONAR_HOST_URL: "https://sq.accuknox.com:443"
#         run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=webgoat-java
     
#       - name: Run AccuKnox SAST job
#         run: |
#           docker run --rm -it \
#             -e SQ_URL=https://sq.accuknox.com:443 \
#             -e SQ_AUTH_TOKEN=squ_15a00575a2e22ac704e7388565d764b5e45fd1ce \
#             -e REPORT_PATH=/app/data/ \
#             -v $PWD:/app/data/ \
#             accuknox/sastjob:latest
            
#       - name: Upload SAST reports
#         env:
#           AK_URL: cspm.demo.accuknox.com
#           TENANT_ID: 167
#           AK_TOK: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzE5NTU1NDk1LCJqdGkiOiJlN2Q4MTdkZjJjYWE0N2EwOGNlZWM2MWU2Y2MwNzhlZiIsImlzcyI6ImNzcG0uZGVtby5hY2N1a25veC5jb20ifQ.A-7oroqqrmcVjeQhbiWVz7yuZq0UXElQFWMGUN-L0VgaziGHIzHSn50NZ6JCYy-_Datixms_YnXKzvsA7i-nDyHSShZamR_pTWgE_IUTLx8z1uKX6f1JnipEBvMWf3VLaHZgUXslcq8QqPXopUfYCvnn1aks2glf4xJuuISH2-zDz2hEFbp4MT1e7WKnNNh9nUoj8B8fOZhkMEPrpC32QWoMtK2tazgMhPXEOlw4fTIyL_GkTznwVZygav-TL1VPNi0pCyamwwFvITaHZ9kpNTgdU5nIloTt4lqcRoJ5kIXw_g-FJmFUeXGrlHei7lFD66UN_3pg5at_3XCkwDyvGA
#         run: |
#           for file in `ls -1 SQ-*.json`; do
#             curl --location --request POST "https://$AK_URL/api/v1/artifact/?tenant_id=$TENANT_ID&data_type=SQ&save_to_s3=false" \
#               --header "Tenant-Id: $TENANT_ID" \
#               --header "Authorization: Bearer $AK_TOK" \
#               --form "file=@\"$file\""
#           done
  # build:
  #   name: Build Project
  #   needs: sast
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Set up JDK 11
  #     uses: actions/setup-java@v2
  #     with:
  #       java-version: '11'
  #       distribution: 'adopt'
  #   - name: Cache Maven packages
  #     uses: actions/cache@v2
  #     with:
  #       path: |
  #         ~/.m2
  #       key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
  #       restore-keys: |
  #         ${{ runner.os }}-m2-
  #   - name: Build with Maven
  #     run: |
  #       mvn clean install -DskipTests
  #       mvn package -DskipTests -Dmaven.repo.local=./.m2/
  #     env:
  #       CI_COMMIT_SHORT_SHA: ${{ github.sha }}
        
  # accuknox-container_scan:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@main  
     
  #     - name: Run AccuKnox CSPM Scan
  #       uses: accuknox/container-scan-action@v0.0.1
  #       with:
  #         token: ${{ secrets.TOKEN }} 
  #         tenant_id: ${{ secrets.TENANT_ID }}
  #         repository_name: ${{ github.repository }}
  #         dockerfile_context: webgoat-server/Dockerfile
          
  # push:
  #   needs: accuknox-container_scan
  #   # needs: build
  #   runs-on: ubuntu-latest
  #   services:
  #     docker:
  #       image: docker:19.03.12
  #       options: --privileged
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Log in to Docker Hub
  #     uses: docker/login-action@v1
  #     with:
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}
  #   - name: Build and push Docker image
  #     run: |
  #       cd webgoat-server
  #       export DOCKER_BUILDKIT=0
  #       docker build --build-arg webgoat_version=v8.1.0 --tag ${{ secrets.DOCKER_USERNAME }}/webgoat:${{ github.sha }} --tag ${{ secrets.DOCKER_USERNAME }}/webgoat:latest .
  #       docker push ${{ secrets.DOCKER_USERNAME }}/webgoat:${{ github.sha }}
  #       docker push ${{ secrets.DOCKER_USERNAME }}/webgoat:latest
  
  # # burp_Dast:
  # #    needs: push
  # #    runs-on: ubuntu-latest
  # #    steps:
  # #    - name: Run Dastardly Action Step
  # #      # continue-on-error: true                        # This allows subsequent steps to run even if this step fails
  # #      uses: PortSwigger/dastardly-github-action@main
  # #      with:
  # #        target-url: 'http://localhost:8080/WebGoat'
  # #    - name: Publish Test Report
  # #      if: always()                                    # Forces this step to always run
  # #      uses: mikepenz/action-junit-report@v3
  # #      with:
  # #         report_paths: '**/dastardly-report.xml'       # You need to update this path if you pass in a different output filename to the Dastardly action
  # #         require_tests: true
          
  # zap_dast:
  #   needs: push
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: ZAP Scan
  #       uses: zaproxy/action-full-scan@v0.9.0
  #       with:
  #         docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
  #         target: 'http://webgoat:8080/WebGoat/'
  #         # cmd_options: '-a'
          
  #         # http_login_form: '/app/login'
  #         # http_login_http_username: 'testuser'
  #         # http_login_http_password: ${{ secrets.ZAP_USER_PW }

          
  # acunetix_dast:
  #     needs: push
  #     runs-on: ubuntu-latest
  #     steps:
  #       - name: Trigger Acuneitx Scan
  #         run: |
  #           curl -k -i --request POST --url "https://online.acunetix.com/api/v1/scans" --header "X-Auth: 1986ad8c0a5b3df4d7028d5f3c06e936c9f1fb4e583a34a3ab293b65715cf6429" --header "content-type: application/json" --data '{"profile_id":"11111111-1111-1111-1111-111111111111", "schedule":{"disable":false,"start_date":null,"time_sensitive":false}, "user_authorized_to_scan":"yes", "target_id":"23c2461f-6528-40e5-8863-8c25833d2195"}'



  
